// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Provides content suggestions for easily cacheable video content.
 *
 * - suggestAlternativeContent - A function that suggests alternative content based on an initial video request.
 * - SuggestAlternativeContentInput - The input type for the suggestAlternativeContent function.
 * - SuggestAlternativeContentOutput - The return type for the suggestAlternativeContent function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestAlternativeContentInputSchema = z.object({
  initialRequest: z
    .string()
    .describe('The initial video content request from the user.'),
});
export type SuggestAlternativeContentInput = z.infer<
  typeof SuggestAlternativeContentInputSchema
>;

const SuggestAlternativeContentOutputSchema = z.object({
  suggestions: z
    .array(
      z.object({
        content: z.string().describe('The suggested alternative content.'),
        reason: z.string().describe('The reason why this content is easily cacheable.'),
      })
    )
    .describe('A list of alternative content suggestions.'),
});
export type SuggestAlternativeContentOutput = z.infer<
  typeof SuggestAlternativeContentOutputSchema
>;

export async function suggestAlternativeContent(
  input: SuggestAlternativeContentInput
): Promise<SuggestAlternativeContentOutput> {
  return suggestAlternativeContentFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestAlternativeContentPrompt',
  input: {schema: SuggestAlternativeContentInputSchema},
  output: {schema: SuggestAlternativeContentOutputSchema},
  prompt: `You are a CDN content expert. A user has requested the following video content: {{{initialRequest}}}. Suggest at least three alternative content options that are easily cacheable on a CDN. For each suggestion, provide a reason why it is easily cacheable.

Ensure that your response is formatted as a JSON object that adheres to the following schema:
${JSON.stringify(SuggestAlternativeContentOutputSchema.describe, null, 2)}`,
});

const suggestAlternativeContentFlow = ai.defineFlow(
  {
    name: 'suggestAlternativeContentFlow',
    inputSchema: SuggestAlternativeContentInputSchema,
    outputSchema: SuggestAlternativeContentOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
